[package]
name = "lw"
version = "0.6.2"
authors = ["Daniel (dmilith) Dettlaff <dmilith@me.com>"]
description = "Log-Watcher utility - replacement for: `tail -F /some/path/*` - that uses Kqueue to watch for new files as wellâ€¦"
keywords = ["kqueue", "log", "watch", "tail", "view"]
categories = ["filesystem"]
homepage = "https://github.com/VerKnowSys/lw"
license = "MIT"
edition = "2018"

[[bin]]
name = "lw"
path = "src/log_watcher.rs"

[dependencies]
log = "0.4.14"
fern = { version = "0.6.0", features = ["colored"] } # my fav Logger extension for Rust
colored = "2.0.0"
walkdir = "2.3.1"
chrono = "0.4.19"
kqueue2 = "0.2.2"
kqueue2-sys = "0.1.5"
mimalloc = "0.1.24"


# The release profile, used for `cargo build --release`.
[profile.release]
opt-level = 3
debug = false
rpath = true
lto = 'fat'
debug-assertions = false
codegen-units = 1
panic = 'abort'
incremental = false
overflow-checks = true


# The benchmarking profile, used for `cargo bench` and `cargo test --release`.
[profile.bench]
opt-level = 3
debug = false
rpath = true
lto = 'fat'
debug-assertions = false
codegen-units = 1
incremental = false
overflow-checks = false


# The testing profile, used for `cargo test`.
[profile.test]
opt-level = 0
debug = 0
rpath = true
lto = false
debug-assertions = false
codegen-units = 4
incremental = true
overflow-checks = false


# The development (default) profile, used for `cargo build`.
[profile.dev]
opt-level = 0                 # controls the `--opt-level` the compiler builds with.
                              # 0-1 is good for debugging. 2 is well-optimized. Max is 3.
                              # 's' attempts to reduce size, 'z' reduces size even more.
debug = 2                     # (u32 or bool) Include debug information (debug symbols).
                              # Equivalent to `-C debuginfo=2` compiler flag.
debug-assertions = false      # controls whether debug assertions are enabled
                              # (e.g. debug_assert!() and arithmetic overflow checks)
rpath = true                  # controls whether compiler should set loader paths.
                              # If true, passes `-C rpath` flag to the compiler.
lto = false                   # Link Time Optimization usually reduces size of binaries
                              # and static libraries. Increases compilation time.
                              # If true, passes `-C lto` flag to the compiler, and if a
                              # string is specified like 'thin' then `-C lto=thin` will
                              # be passed.
codegen-units = 4             # if > 1 enables parallel code generation which improves
                              # compile times, but prevents some optimizations.
                              # Passes `-C codegen-units`.
panic = 'unwind'              # panic strategy (`-C panic=...`), can also be 'abort'
incremental = true            # whether or not incremental compilation is enabled
overflow-checks = false       # use overflow checks for integer arithmetic.
                              # Passes the `-C overflow-checks=...` flag to the compiler.
